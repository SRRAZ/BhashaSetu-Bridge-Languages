// Generated by view binder compiler. Do not edit!
package com.bhashasetu.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bhashasetu.app.R;
import com.bhashasetu.app.util.ChartView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPronunciationProgressDashboardBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final Button btnNewPractice;

  @NonNull
  public final Button btnStartPracticing;

  @NonNull
  public final ChartView chartProgress;

  @NonNull
  public final NestedScrollView contentView;

  @NonNull
  public final LinearLayout emptyView;

  @NonNull
  public final ProgressBar loadingView;

  @NonNull
  public final ProgressBar progressOverall;

  @NonNull
  public final RecyclerView recyclerImprovementSuggestions;

  @NonNull
  public final RecyclerView recyclerRecentSessions;

  @NonNull
  public final CardView suggestionsContainer;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView tvAverageAccuracy;

  @NonNull
  public final TextView tvBestScore;

  @NonNull
  public final TextView tvProficiencyLevel;

  @NonNull
  public final TextView tvTotalSessions;

  @NonNull
  public final TextView tvTotalWords;

  @NonNull
  public final TextView tvUniqueWords;

  private ActivityPronunciationProgressDashboardBinding(@NonNull CoordinatorLayout rootView,
      @NonNull Button btnNewPractice, @NonNull Button btnStartPracticing,
      @NonNull ChartView chartProgress, @NonNull NestedScrollView contentView,
      @NonNull LinearLayout emptyView, @NonNull ProgressBar loadingView,
      @NonNull ProgressBar progressOverall, @NonNull RecyclerView recyclerImprovementSuggestions,
      @NonNull RecyclerView recyclerRecentSessions, @NonNull CardView suggestionsContainer,
      @NonNull Toolbar toolbar, @NonNull TextView tvAverageAccuracy, @NonNull TextView tvBestScore,
      @NonNull TextView tvProficiencyLevel, @NonNull TextView tvTotalSessions,
      @NonNull TextView tvTotalWords, @NonNull TextView tvUniqueWords) {
    this.rootView = rootView;
    this.btnNewPractice = btnNewPractice;
    this.btnStartPracticing = btnStartPracticing;
    this.chartProgress = chartProgress;
    this.contentView = contentView;
    this.emptyView = emptyView;
    this.loadingView = loadingView;
    this.progressOverall = progressOverall;
    this.recyclerImprovementSuggestions = recyclerImprovementSuggestions;
    this.recyclerRecentSessions = recyclerRecentSessions;
    this.suggestionsContainer = suggestionsContainer;
    this.toolbar = toolbar;
    this.tvAverageAccuracy = tvAverageAccuracy;
    this.tvBestScore = tvBestScore;
    this.tvProficiencyLevel = tvProficiencyLevel;
    this.tvTotalSessions = tvTotalSessions;
    this.tvTotalWords = tvTotalWords;
    this.tvUniqueWords = tvUniqueWords;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPronunciationProgressDashboardBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPronunciationProgressDashboardBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_pronunciation_progress_dashboard, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPronunciationProgressDashboardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_new_practice;
      Button btnNewPractice = ViewBindings.findChildViewById(rootView, id);
      if (btnNewPractice == null) {
        break missingId;
      }

      id = R.id.btn_start_practicing;
      Button btnStartPracticing = ViewBindings.findChildViewById(rootView, id);
      if (btnStartPracticing == null) {
        break missingId;
      }

      id = R.id.chart_progress;
      ChartView chartProgress = ViewBindings.findChildViewById(rootView, id);
      if (chartProgress == null) {
        break missingId;
      }

      id = R.id.content_view;
      NestedScrollView contentView = ViewBindings.findChildViewById(rootView, id);
      if (contentView == null) {
        break missingId;
      }

      id = R.id.empty_view;
      LinearLayout emptyView = ViewBindings.findChildViewById(rootView, id);
      if (emptyView == null) {
        break missingId;
      }

      id = R.id.loading_view;
      ProgressBar loadingView = ViewBindings.findChildViewById(rootView, id);
      if (loadingView == null) {
        break missingId;
      }

      id = R.id.progress_overall;
      ProgressBar progressOverall = ViewBindings.findChildViewById(rootView, id);
      if (progressOverall == null) {
        break missingId;
      }

      id = R.id.recycler_improvement_suggestions;
      RecyclerView recyclerImprovementSuggestions = ViewBindings.findChildViewById(rootView, id);
      if (recyclerImprovementSuggestions == null) {
        break missingId;
      }

      id = R.id.recycler_recent_sessions;
      RecyclerView recyclerRecentSessions = ViewBindings.findChildViewById(rootView, id);
      if (recyclerRecentSessions == null) {
        break missingId;
      }

      id = R.id.suggestions_container;
      CardView suggestionsContainer = ViewBindings.findChildViewById(rootView, id);
      if (suggestionsContainer == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tv_average_accuracy;
      TextView tvAverageAccuracy = ViewBindings.findChildViewById(rootView, id);
      if (tvAverageAccuracy == null) {
        break missingId;
      }

      id = R.id.tv_best_score;
      TextView tvBestScore = ViewBindings.findChildViewById(rootView, id);
      if (tvBestScore == null) {
        break missingId;
      }

      id = R.id.tv_proficiency_level;
      TextView tvProficiencyLevel = ViewBindings.findChildViewById(rootView, id);
      if (tvProficiencyLevel == null) {
        break missingId;
      }

      id = R.id.tv_total_sessions;
      TextView tvTotalSessions = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalSessions == null) {
        break missingId;
      }

      id = R.id.tv_total_words;
      TextView tvTotalWords = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalWords == null) {
        break missingId;
      }

      id = R.id.tv_unique_words;
      TextView tvUniqueWords = ViewBindings.findChildViewById(rootView, id);
      if (tvUniqueWords == null) {
        break missingId;
      }

      return new ActivityPronunciationProgressDashboardBinding((CoordinatorLayout) rootView,
          btnNewPractice, btnStartPracticing, chartProgress, contentView, emptyView, loadingView,
          progressOverall, recyclerImprovementSuggestions, recyclerRecentSessions,
          suggestionsContainer, toolbar, tvAverageAccuracy, tvBestScore, tvProficiencyLevel,
          tvTotalSessions, tvTotalWords, tvUniqueWords);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
