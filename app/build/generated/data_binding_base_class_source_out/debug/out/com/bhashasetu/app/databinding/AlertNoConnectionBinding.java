// Generated by view binder compiler. Do not edit!
package com.bhashasetu.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bhashasetu.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AlertNoConnectionBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView noConnectionIcon;

  @NonNull
  public final TextView noConnectionMessage;

  @NonNull
  public final Button offlineButton;

  @NonNull
  public final Button settingsButton;

  private AlertNoConnectionBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView noConnectionIcon, @NonNull TextView noConnectionMessage,
      @NonNull Button offlineButton, @NonNull Button settingsButton) {
    this.rootView = rootView;
    this.noConnectionIcon = noConnectionIcon;
    this.noConnectionMessage = noConnectionMessage;
    this.offlineButton = offlineButton;
    this.settingsButton = settingsButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AlertNoConnectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AlertNoConnectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.alert_no_connection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AlertNoConnectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.no_connection_icon;
      ImageView noConnectionIcon = ViewBindings.findChildViewById(rootView, id);
      if (noConnectionIcon == null) {
        break missingId;
      }

      id = R.id.no_connection_message;
      TextView noConnectionMessage = ViewBindings.findChildViewById(rootView, id);
      if (noConnectionMessage == null) {
        break missingId;
      }

      id = R.id.offline_button;
      Button offlineButton = ViewBindings.findChildViewById(rootView, id);
      if (offlineButton == null) {
        break missingId;
      }

      id = R.id.settings_button;
      Button settingsButton = ViewBindings.findChildViewById(rootView, id);
      if (settingsButton == null) {
        break missingId;
      }

      return new AlertNoConnectionBinding((LinearLayout) rootView, noConnectionIcon,
          noConnectionMessage, offlineButton, settingsButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
