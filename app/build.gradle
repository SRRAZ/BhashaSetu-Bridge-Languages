plugins {
    id 'com.android.application' // Version managed by settings.gradle (or project-level build.gradle's buildscript)
    id 'org.jetbrains.kotlin.android' // Version managed by settings.gradle (or project-level build.gradle's buildscript)
    id 'kotlin-kapt' // Kapt plugin version is tied to the Kotlin plugin version
    // If you add other plugins like Hilt, ensure their application is correct:
    // id 'com.google.dagger.hilt.android'
}

// Load keystore properties if available
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    try {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } catch (FileNotFoundException e) {
        logger.warn("Keystore properties file not found: ${keystorePropertiesFile}")
    }
}

android {
    namespace "com.bhashasetu.app"
    compileSdk 34 // Updated, but ensure it matches your project's needs (34 or 35 if ready)

    defaultConfig {
        applicationId "com.bhashasetu.app" // This can be overridden by productFlavors
        minSdk 21
        targetSdk 34 // Should ideally match compileSdk

        // Updated for release (these are example values, manage them as per your release cycle)
        versionCode 2
        versionName "1.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Set vectors for backward compatibility
        vectorDrawables.useSupportLibrary = true

        // Multidex support - generally not needed if minSdk is 21+ and using modern AGP
        // but keeping it as it was in your original file.
        // Modern AGP handles dexing more efficiently.
        multiDexEnabled true
        // resourceConfigurations is fine, but consider using bundle language settings for App Bundles
    }

    // Signing configuration
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties.getProperty('storeFile', ''))
                storePassword keystoreProperties.getProperty('keystorePassword', '')
                keyAlias keystoreProperties.getProperty('keyAlias', '')
                keyPassword keystoreProperties.getProperty('keyPassword', '')
            } else {
                logger.warn("""
                    Keystore properties (keystore.properties) not found.
                    Release builds may not be signed.
                    Create keystore.properties in the root project directory with:
                    storeFile=<path_to_your_keystore.jks>
                    keystorePassword=<your_store_password>
                    keyAlias=<your_key_alias>
                    keyPassword=<your_key_password>
                """.stripIndent())
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true // Default for debug
            minifyEnabled false
        }

        beta { // Assuming you still want this custom build type
            initWith debug // Useful to inherit common settings from debug
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta"
            debuggable false
            minifyEnabled true
            shrinkResources true // Only works if minifyEnabled is true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release // Ensure this signing config is properly set up
        }

        release {
            debuggable false
            minifyEnabled true
            shrinkResources true // Only works if minifyEnabled is true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release // Ensure this signing config is properly set up
        }
    }

    // Product flavors for different app versions
    flavorDimensions += ["version"] // Ensure this matches exactly "version" if that's what you intend
    productFlavors {
        free {
            dimension "version"
            applicationIdSuffix ".free"
            versionNameSuffix "-free"
            // Free version specific configurations
            buildConfigField "boolean", "PREMIUM_FEATURES_ENABLED", "false"
        }

        premium {
            dimension "version"
            applicationIdSuffix ".premium"
            versionNameSuffix "-premium"
            // Premium version specific configurations
            buildConfigField "boolean", "PREMIUM_FEATURES_ENABLED", "true"
        }
    }

    // Bundle configuration for Android App Bundle (AAB)
    bundle {
        language {
            // Include only English and Hindi resources in the base APK,
            // other languages will be delivered via split APKs if available.
            enableSplit = true // Set to true to enable language splitting
            // 'include' is generally not needed if resourceConfigurations is set in defaultConfig,
            // as the build system will pick those up. If you specifically want to limit what goes
            // into the *base* module vs splits, this can be used.
            // However, your 'resourceConfigurations' in defaultConfig already handles this for string resources.
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    // Jetpack Compose configuration
    buildFeatures {
        compose true
        buildConfig true // You are using buildConfigField, so this is needed
    }

    composeOptions {
        // Updated for Kotlin 1.9.23.
        // Check Compose-Kotlin compatibility: https://developer.android.com/jetpack/androidx/releases/compose-kotlin
        kotlinCompilerExtensionVersion '1.5.11'
    }

    // Use Java toolchain API (Good practice)
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17) // Recommended for modern AGP & libraries
        }
    }

    // kotlinOptions jvmTarget should ideally match the Java toolchain or be compatible.
    kotlinOptions {
        jvmTarget = '17' // Align with Java toolchain version 17
    }

    // Resolve duplicate resources conflicts
    packagingOptions { // Changed from 'packaging' to 'packagingOptions' (older AGP versions used 'packaging')
        resources {
            pickFirsts += [ // Using += to append, ensuring not to overwrite other potential pickFirsts
                            'META-INF/AL2.0',
                            'META-INF/LGPL2.1',
                            'META-INF/LICENSE.txt',
                            'META-INF/NOTICE.txt',
                            'META-INF/DEPENDENCIES' // Common for libraries like kotlinx.coroutines
            ]
            excludes += [ // Example: Exclude duplicate license files if necessary
                          '/META-INF/{AL2.0,LGPL2.1}' // This is more common in excludes
            ]
        }
    }

    // Lint options
    lint { // Changed from 'lintOptions' to 'lint' (older AGP used 'lintOptions')
        abortOnError false // Consider setting to true for release builds or CI
        checkReleaseBuilds true
        // disable 'MissingTranslation' // Be cautious disabling lint checks
    }
}

dependencies {
    // Core libraries
    implementation 'androidx.core:core-ktx:1.13.1' // Updated
    implementation 'androidx.appcompat:appcompat:1.7.0' // Updated
    implementation 'com.google.android.material:material:1.12.0' // Updated
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4' // Still widely used, check if newer needed
    implementation 'androidx.multidex:multidex:2.0.1' // Consider if still needed with minSdk 21+

    // Kotlin - stdlib is usually brought in by the Kotlin plugin, but can be explicit
    // implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // $kotlin_version from rootProject

    // Jetpack Compose (using BOM for consistent versions)
    // The BOM version should be compatible with your Kotlin version and Compose Compiler Extension version
    def composeBomVersion = "2024.06.00" // Check for the latest BOM compatible with Compiler 1.5.11
    implementation platform("androidx.compose:compose-bom:$composeBomVersion")
    androidTestImplementation platform("androidx.compose:compose-bom:$composeBomVersion") // For androidTest

    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics' // Usually included with ui, but explicit is fine
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3' // Assuming you're on Material 3
    // implementation 'androidx.compose.material:material' // If you're still on Material 2 with Compose

    implementation 'androidx.compose.runtime:runtime-livedata' // If you use LiveData with Compose
    implementation 'androidx.activity:activity-compose:1.9.0' // Updated
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.3' // Updated
    implementation 'androidx.navigation:navigation-compose:2.7.7' // Updated

    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest' // For UI tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4' // For UI tests

    // Coil for image loading in Compose
    implementation 'io.coil-kt:coil-compose:2.6.0' // Updated

    // Room for database with Kotlin
    def room_version = "2.6.1" // Updated
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version" // For Coroutines support
    kapt "androidx.room:room-compiler:$room_version"

    // Coroutines and Flow
    def coroutines_version = "1.8.1" // Updated (check latest stable)
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Lifecycle and ViewModel
    def lifecycle_version = "2.8.3" // Updated
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Navigation components (Fragments - if you still use them alongside Compose)
    def navigation_version = "2.7.7" // Updated
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Image loading and caching (Glide - if used outside Compose or for specific cases)
    def glide_version = "4.16.0" // Still current, check if newer needed
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // TensorFlow Lite for ML features (pronunciation)
    // Check for latest compatible versions. These might be a bit old.
    implementation 'org.tensorflow:tensorflow-lite:2.14.0' // Consider updating
    implementation 'org.tensorflow:tensorflow-lite-support:0.4.4' // Consider updating

    // Unit testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.12.0' // Updated
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.4.0" // Updated (for Kotlin-friendly Mockito)
    testImplementation 'org.robolectric:robolectric:4.13' // Updated
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version" // For testing coroutines

    // Android testing
    androidTestImplementation 'androidx.test.ext:junit:1.2.1' // Updated
    androidTestImplementation 'androidx.test:runner:1.6.1' // Updated
    androidTestImplementation 'androidx.test:rules:1.6.1' // Updated

    // UI testing (Espresso - if you have Espresso tests for non-Compose parts)
    def espresso_version = "3.6.1" // Updated
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0' // Updated

    // Performance testing and monitoring
    // androidTestImplementation 'androidx.benchmark:benchmark-junit4:1.2.4' // Updated, check androidx.benchmark:benchmark-macro-junit4 as well

    // LeakCanary - only for debug builds
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14' // Updated
}